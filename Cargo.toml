[package]
name = "canggu"
version = "0.1.0"
edition = "2024"

[dependencies]
# Quantum-resistant crypto (like CRYSTALS-Kyber/Dilithium)
pqcrypto-kyber = "0.8.1"     # Kyber for key exchange
pqcrypto-dilithium = "0.5.0" # Dilithium for signatures

# ZK-SNARKs (zero-knowledge proofs)
bellman = "0.14.0" # For ZK-SNARK circuits
rand = "0.8.5"     # Randomness for proofs

# GPU support (CUDA bindings) or we can use cudarc (researching on that)
# https://rust-gpu.github.io/Rust-CUDA/guide/getting_started.html
# cust = "0.3.2"
cuda_std = "0.2.2" # Basic CUDA integration

# Serialization
bincode = { version = "1.3.3" }
serde_json = "1.0"

serde_bytes = "0.11.17"
serde = { version = "1.0", features = ["derive"] } # Serialization
sha2 = "0.10"                                      # Hashing (SHA-256 fallback)

tokio = { version = "1.28", features = ["full"] }
async-trait = "0.1.68"
log = "0.4"
env_logger = "0.11.7"
clap = { version = "4.3", features = ["derive"] }
# Cryptography
ed25519-dalek = { version = "2.1.1", features = ["serde", "rand_core"] }

reqwest = { version = "0.12.15", features = ["blocking", "json"] }
# Networking
libp2p = { version = "0.43.0", features = [
    "tcp-tokio",
    "mdns",
    "websocket",
    "noise",
    "mplex",
    "yamux",
    "gossipsub",
] }

void = "1.0.2"

# Storage
sled = "0.34"

rand_core = "0.6.4"

# eBPF VM
rbpf = "0.3.0"
solana_rbpf = "0.8.5"

futures = "0.3.31"

bs58 = "0.5.1"

hex = "0.4.3"
home = "0.5"

# Utilities
thiserror = "2.0.12"
anyhow = "1.0"
chrono = "0.4"

[dev-dependencies]
tempfile = "3.5"
assert_cmd = "2.0"
criterion = "0.5.1"

# [[bench]]
# name = "consensus_bench"
# harness = false

# [workspace]
# members = [".", "examples/basic_contract"]
